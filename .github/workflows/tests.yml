name: Testsuite

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions:
    contents: read

jobs:
    tests:
        name: Tests (PHP ${{ matrix.php-versions }})
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:16
                ports:
                    - 5432:5432
                env:
                    POSTGRES_DB: app
                    POSTGRES_USER: app
                    POSTGRES_PASSWORD: password
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        strategy:
            fail-fast: true
            matrix:
                php-versions: ["8.4"]

        steps:
            - name: "Checkout code"
              uses: actions/checkout@v4

            - name: "Install PHP with extensions"
              uses: shivammathur/setup-php@v2
              with:
                  coverage: "none"
                  extensions: "intl, mbstring, pdo_sqlite, zip"
                  php-version: ${{ matrix.php-version }}
                  tools: composer:v2

            - name: "Set composer cache directory"
              id: composer-cache
              run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
              shell: bash

            - name: "Cache composer"
              uses: actions/cache@v4
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: "Install dependencies"
              run: composer install --ansi --no-interaction --no-progress

            - name: "Build and compile assets"
              run: |
                  php bin/console importmap:install
                  php bin/console asset-map:compile

            - name: "Prepare Database"
              run: |
                  php bin/console doctrine:database:drop --if-exists --force --env test
                  php bin/console doctrine:database:create --env test
                  php bin/console doctrine:schema:create --env test

            - name: Execute tests via PHPUnit
              run: vendor/bin/phpunit
              env:
                  DATABASE_URL: postgres://app:password@127.0.0.1:${{ job.services.postgres.ports['5432'] }}/app
                  XDEBUG_MODE: coverage

            - name: Upload coverage reports to Codecov
              uses: codecov/codecov-action@v5
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
